<?xml version="1.0"?>
<!-- Function test suite -->
<stx:transform xmlns:stx="http://stx.sourceforge.net/2002/ns" version="1.0">

  <stx:template match="/">
    <stx:value-of select="concat('Hello', ', ', 'world&#xA;')" />
    <stx:value-of select="string-length(1234=5)" />, <!-- false -->
    <stx:value-of select="normalize-space('   x    y  &#9;     z ')" />,
    <stx:value-of select="string-length(normalize-space('  &#xA;   '))" />,
    <stx:value-of select="not(true() and false())" />,
    <stx:value-of select="not(true() or false())" />,
    <stx:value-of select="fn:concat(fn:true(), ' - ', fn:false())"
                  xmlns:fn="http://stx.sourceforge.net/2003/functions" />,
 starts-with
    <stx:value-of select="starts-with('abcd', 'ab')" />,
    <stx:value-of select="starts-with('abcd', 'abcd')" />,
    <stx:value-of select="starts-with('abcd', '')" />,
    <stx:value-of select="starts-with('abcd', 'xyz')" />,
    <stx:value-of select="starts-with('', 'xyz')" />,
    <stx:value-of select="starts-with('', '')" />,
 ends-with
    <stx:value-of select="ends-with('abcd', 'cd')" />,
    <stx:value-of select="ends-with('abcd', 'abcd')" />,
    <stx:value-of select="ends-with('abcd', '')" />,
    <stx:value-of select="ends-with('abcd', 'xyz')" />,
    <stx:value-of select="ends-with('', 'xyz')" />,
    <stx:value-of select="ends-with('', '')" />,
 contains
    <stx:value-of select="contains('abcd','bc')" />,
    <stx:value-of select="contains('abcd','abcd')" />,
    <stx:value-of select="contains('abcd','')" />,
    <stx:value-of select="contains('','')" />,
    <stx:value-of select="contains('','x')" />,
 substring
    "<stx:value-of select="substring('abcde',1,1)" />"
    "<stx:value-of select="substring('abcde',1)" />"
    "<stx:value-of select="substring('abcde',2,3)" />"
    "<stx:value-of select="substring('abcde',6)" />"
    "<stx:value-of select="substring('abcde',-3)" />"
    "<stx:value-of select="substring('abcde',-3,6)" />"
    "<stx:value-of select="substring('abcde',1.7,1.3)" />"
    "<stx:value-of select="substring('abcde',1 div 0)" />"
    "<stx:value-of select="substring('abcde',3,0)" />"
    "<stx:value-of select="substring('abcde',3,5)" />"
    "<stx:value-of select="substring('12345',1.5,2.6)" />"
    "<stx:value-of select="substring('12345',0,3)" />"
    "<stx:value-of select="substring('12345',0 div 0, 3)" />"
    "<stx:value-of select="substring('12345',1, 0 div 0)" />"
    "<stx:value-of select="substring('12345',-42, 1 div 0)" />"
    "<stx:value-of select="substring('12345',-1 div 0, 1 div 0)" />"
    "<stx:value-of select="substring('12345',-1 div 0)" />"
 substring-before
    "<stx:value-of select="substring-before('abcdeabcde','cd')" />"
    "<stx:value-of select="substring-before('abcdeabcde','')" />"
    "<stx:value-of select="substring-before('abcdeabcde','xxx')" />"
 substring-after
    "<stx:value-of select="substring-after('abcdeabcde','cd')" />"
    "<stx:value-of select="substring-after('abcdeabcde','')" />"
    "<stx:value-of select="substring-after('abcdeabcde','xxx')" />"
 translate
    "<stx:value-of select="translate('This is a new foo for all bars',
                                     'abcdefghijklmnopqrstuvwxyz',
                                     'ABCDEFGHIJKLMNOPQRSTUVWXYZ')" />"
    "<stx:value-of select="translate('1.299,50', ',.', '.')" />"
    "<stx:value-of select="translate('abcde', 'abcabc', 'xyz1234')" />"
 string-pad
    "<stx:value-of select="string-pad('STX',3)" />"
    "<stx:value-of select="string-pad('STX',1)" />"
    "<stx:value-of select="string-pad('STX',0)" />"
    "<stx:value-of select="string-pad((),20)" />"
 escape-uri
    "<stx:value-of select='escape-uri("gopher://spinaltap.micro.umn.edu/00/Weather/CA/Los%20Angeles#ocean", true())' />"
    "<stx:value-of select='escape-uri("gopher://spinaltap.micro.umn.edu/00/Weather/CA/Los%20Angeles#ocean", false())' />"
    "<stx:value-of select="escape-uri('^%GOOD%BAD%', true())" />"
    "<stx:value-of select="escape-uri('^%GOOD%BAD%1', true())" />"
    "<stx:value-of select="escape-uri('^%GOOD%BAD%12', true())" />"
 floor, ceiling, round<stx:text/>
    <stx:variable name="n" select="2.3" />
    * <stx:value-of select="$n" />: <stx:value-of select="floor($n)" />, <stx:value-of select="ceiling($n)" />, <stx:value-of select="round($n)" />
    <stx:assign name="n" select="2.7" />
    * <stx:value-of select="$n" />: <stx:value-of select="floor($n)" />, <stx:value-of select="ceiling($n)" />, <stx:value-of select="round($n)" />
    <stx:assign name="n" select="10.5" />
    * <stx:value-of select="$n" />: <stx:value-of select="floor($n)" />, <stx:value-of select="ceiling($n)" />, <stx:value-of select="round($n)" />
    <stx:assign name="n" select="-10.5" />
    * <stx:value-of select="$n" />: <stx:value-of select="floor($n)" />, <stx:value-of select="ceiling($n)" />, <stx:value-of select="round($n)" />
    <stx:assign name="n" select="0 div 0" />
    * <stx:value-of select="$n" />: <stx:value-of select="floor($n)" />, <stx:value-of select="ceiling($n)" />, <stx:value-of select="round($n)" />
    <stx:assign name="n" select="1 div 0" />
    * <stx:value-of select="$n" />: <stx:value-of select="floor($n)" />, <stx:value-of select="ceiling($n)" />, <stx:value-of select="round($n)" />
    <stx:assign name="n" select="-1 div 0" />
    * <stx:value-of select="$n" />: <stx:value-of select="floor($n)" />, <stx:value-of select="ceiling($n)" />, <stx:value-of select="round($n)" />
    <stx:text>&#xA;</stx:text>
    <stx:process-children />
  </stx:template>

  <stx:variable name="n" />
  
  <stx:template match="node()">
    <stx:assign name="n" select="." />
    <stx:value-of select="concat(position(), ' ', name($n),' ')" />
    <stx:if test="local-name()">
      <stx:value-of select="concat('({', namespace-uri(.), ' | ',
                                   substring-before(name(.),':'), '}, ',
                                   local-name(.), ')')" />
    </stx:if>
    <stx:if test="name()='' and normalize-space()=."> no whitespace!</stx:if>
    <stx:text>&#xA;</stx:text>
    <stx:if test="name()!=name(.) or local-name()!=local-name(.) or
                  namespace-uri()!=namespace-uri(.)">
      This should never be displayed!
    </stx:if>
    <stx:process-children />
  </stx:template>

  <stx:template match="text()" priority="-2" />
</stx:transform>

